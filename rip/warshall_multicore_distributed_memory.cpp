//#include <mpi.h>
//#include <iostream>
//#include <vector>
//#include <cstdlib>
//
//#define N 50
//
//void printMatrix(const std::vector<int>& A, int n, int rank) {
//    if (rank == 0) {
//        std::cout << "\nTransitive Closure (Final Result):\n";
//        for (int i = 0; i < n; ++i) {
//            for (int j = 0; j < n; ++j)
//                std::cout << A[i * n + j] << " ";
//            std::cout << "\n";
//        }
//    }
//}
//
//int main(int argc, char* argv[]) {
//    MPI_Init(&argc, &argv);
//
//    int rank, size;
//    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
//    MPI_Comm_size(MPI_COMM_WORLD, &size);
//
//    std::vector<int> A(N * N);
//    if (rank == 0) {
//        int temp[N][N] = {
//        {1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1},
//        {0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0},
//        {1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1},
//        {0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0},
//        {1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1},
//        {0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0},
//        {1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1},
//        {0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0},
//        {1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1},
//        {0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0},
//        {1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1},
//        {0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0},
//        {1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1},
//        {0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0},
//        {1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1},
//        {0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0},
//        {1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1},
//        {0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0},
//        {1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1},
//        {0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0},
//        {1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1},
//        {0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0},
//        {1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1},
//        {0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0},
//        {1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1},
//        {0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0},
//        {1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1},
//        {0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0},
//        {1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1},
//        {0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0},
//        {1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1},
//        {0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0},
//        {1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1},
//        {0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0},
//        {1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1},
//        {0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0},
//        {1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1},
//        {0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0},
//        {1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1},
//        {0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0},
//        {1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1},
//        {0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0},
//        {1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1},
//        {0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0},
//        {1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1},
//        {0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0},
//        {1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1},
//        {0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0},
//        {1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1},
//        {0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0}
//        };
//        for (int i = 0; i < N; ++i)
//            for (int j = 0; j < N; ++j)
//                A[i * N + j] = temp[i][j];
//    }
//
//    MPI_Bcast(A.data(), N * N, MPI_INT, 0, MPI_COMM_WORLD);
//
//    int rows_per_proc = N / size;
//    int remainder = N % size;
//    int start_row, end_row;
//
//    if (rank < remainder) {
//        start_row = rank * (rows_per_proc + 1);
//        end_row = start_row + (rows_per_proc + 1);
//    }
//    else {
//        start_row = rank * rows_per_proc + remainder;
//        end_row = start_row + rows_per_proc;
//    }
//    int local_rows = end_row - start_row;
//    std::vector<int> krow(N);
//
//    double t_start = MPI_Wtime();
//
//    for (int k = 0; k < N; ++k) {
//        int owner;
//        if (k < remainder * (rows_per_proc + 1))
//            owner = k / (rows_per_proc + 1);
//        else
//            owner = remainder + (k - remainder * (rows_per_proc + 1)) / rows_per_proc;
//        if (rank == owner) {
//            for (int j = 0; j < N; ++j)
//                krow[j] = A[k * N + j];
//        }
//
//        MPI_Bcast(krow.data(), N, MPI_INT, owner, MPI_COMM_WORLD);
//
//        for (int i = start_row; i < end_row; ++i) {
//            for (int j = 0; j < N; ++j) {
//                A[i * N + j] = A[i * N + j] || (A[i * N + k] && krow[j]);
//            }
//        }
//    }
//
//    double t_end = MPI_Wtime();
//    double duration = (t_end - t_start) * 1000;
//
//    std::vector<int> finalA;
//    if (rank == 0)
//        finalA.resize(N * N);
//
//    std::vector<int> sendcounts(size);
//    std::vector<int> displs(size);
//
//    for (int r = 0; r < size; ++r) {
//        int r_start, r_end;
//        if (r < remainder) {
//            r_start = r * (rows_per_proc + 1);
//            r_end = r_start + (rows_per_proc + 1);
//        }
//        else {
//            r_start = r * rows_per_proc + remainder;
//            r_end = r_start + rows_per_proc;
//        }
//        sendcounts[r] = (r_end - r_start) * N;
//        displs[r] = r_start * N;
//    }
//
//    MPI_Gatherv(
//        A.data() + start_row * N, local_rows * N, MPI_INT,
//        finalA.data(), sendcounts.data(), displs.data(), MPI_INT,
//        0, MPI_COMM_WORLD
//    );
//
//    if (rank == 0) {
//        printMatrix(finalA, N, rank);
//        std::cout << "\nWarshall algorithm completed in " << duration << " miliseconds.\n";
//    }
//
//    MPI_Finalize();
//    return 0;
//}